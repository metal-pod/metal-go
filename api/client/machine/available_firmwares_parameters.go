// Code generated by go-swagger; DO NOT EDIT.

package machine

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewAvailableFirmwaresParams creates a new AvailableFirmwaresParams object
// with the default values initialized.
func NewAvailableFirmwaresParams() *AvailableFirmwaresParams {
	var ()
	return &AvailableFirmwaresParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAvailableFirmwaresParamsWithTimeout creates a new AvailableFirmwaresParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAvailableFirmwaresParamsWithTimeout(timeout time.Duration) *AvailableFirmwaresParams {
	var ()
	return &AvailableFirmwaresParams{

		timeout: timeout,
	}
}

// NewAvailableFirmwaresParamsWithContext creates a new AvailableFirmwaresParams object
// with the default values initialized, and the ability to set a context for a request
func NewAvailableFirmwaresParamsWithContext(ctx context.Context) *AvailableFirmwaresParams {
	var ()
	return &AvailableFirmwaresParams{

		Context: ctx,
	}
}

// NewAvailableFirmwaresParamsWithHTTPClient creates a new AvailableFirmwaresParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAvailableFirmwaresParamsWithHTTPClient(client *http.Client) *AvailableFirmwaresParams {
	var ()
	return &AvailableFirmwaresParams{
		HTTPClient: client,
	}
}

/*AvailableFirmwaresParams contains all the parameters to send to the API endpoint
for the available firmwares operation typically these are written to a http.Request
*/
type AvailableFirmwaresParams struct {

	/*Board
	  the board

	*/
	Board string
	/*ID
	  restrict available firmwares to the machine identified by this query parameter

	*/
	ID *string
	/*Kind
	  the kind, i.e. 'bios' or 'bmc'

	*/
	Kind *string
	/*Vendor
	  the vendor

	*/
	Vendor string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the available firmwares params
func (o *AvailableFirmwaresParams) WithTimeout(timeout time.Duration) *AvailableFirmwaresParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the available firmwares params
func (o *AvailableFirmwaresParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the available firmwares params
func (o *AvailableFirmwaresParams) WithContext(ctx context.Context) *AvailableFirmwaresParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the available firmwares params
func (o *AvailableFirmwaresParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the available firmwares params
func (o *AvailableFirmwaresParams) WithHTTPClient(client *http.Client) *AvailableFirmwaresParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the available firmwares params
func (o *AvailableFirmwaresParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBoard adds the board to the available firmwares params
func (o *AvailableFirmwaresParams) WithBoard(board string) *AvailableFirmwaresParams {
	o.SetBoard(board)
	return o
}

// SetBoard adds the board to the available firmwares params
func (o *AvailableFirmwaresParams) SetBoard(board string) {
	o.Board = board
}

// WithID adds the id to the available firmwares params
func (o *AvailableFirmwaresParams) WithID(id *string) *AvailableFirmwaresParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the available firmwares params
func (o *AvailableFirmwaresParams) SetID(id *string) {
	o.ID = id
}

// WithKind adds the kind to the available firmwares params
func (o *AvailableFirmwaresParams) WithKind(kind *string) *AvailableFirmwaresParams {
	o.SetKind(kind)
	return o
}

// SetKind adds the kind to the available firmwares params
func (o *AvailableFirmwaresParams) SetKind(kind *string) {
	o.Kind = kind
}

// WithVendor adds the vendor to the available firmwares params
func (o *AvailableFirmwaresParams) WithVendor(vendor string) *AvailableFirmwaresParams {
	o.SetVendor(vendor)
	return o
}

// SetVendor adds the vendor to the available firmwares params
func (o *AvailableFirmwaresParams) SetVendor(vendor string) {
	o.Vendor = vendor
}

// WriteToRequest writes these params to a swagger request
func (o *AvailableFirmwaresParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param board
	if err := r.SetPathParam("board", o.Board); err != nil {
		return err
	}

	if o.ID != nil {

		// query param id
		var qrID string
		if o.ID != nil {
			qrID = *o.ID
		}
		qID := qrID
		if qID != "" {
			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}

	}

	if o.Kind != nil {

		// query param kind
		var qrKind string
		if o.Kind != nil {
			qrKind = *o.Kind
		}
		qKind := qrKind
		if qKind != "" {
			if err := r.SetQueryParam("kind", qKind); err != nil {
				return err
			}
		}

	}

	// path param vendor
	if err := r.SetPathParam("vendor", o.Vendor); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
